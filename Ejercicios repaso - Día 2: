/*best-time-to-buy-and-sell-stock*/

let numbers = [7, 1, 5, 3, 6, 4];

function best(nums) {
  let resultado = 0;
  /*creo 2 bucles para restar los números en distintas posiciones*/
  for (let i = 0; i < nums.length; i++) {
    for (let j = i + 1; j < nums.length; j++) {
      /*guardo la resta en una variable temporal*/
      let temp = nums[j] - nums[i];
      /*cada vez que la variable temporal es mayor la guardo en la varibale resultado*/
      if (temp > resultado) {
        resultado = temp;
      }
    }
  }
  return resultado;
}
console.log(best(numbers));

////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*EJERCICIO ROBOT*/

let moves = "UDLL";

/*Declaramos variables para cada movimiento*/
let up = 0;
let down = 0;
let right = 0;
let left = 0;

function robot(moves) {

  /*separamos las letras con split*/
  const splitMoves = moves.split("");

  /*cada letra añade una unidad a cada variable*/
  for (let move of splitMoves)
    if (move === "U") {
      up++;
    } else if (move === "D") {
      down++;
    } else if (move === "R") {
      right++;
    }
  left++;

/*guardamos en 2 varibales la resta horizontal y vertical */
  let ejeX = right - left;
  let ejeY = up - down;

  /*si las 2 resta es 0 estaremos en la posicion inicial por tanto true, al contrario false*/
  if (ejeX === 0 && ejeY === 0) {
    return true;
  }
  return false;
}

console.log(robot(moves));

////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*ROBOT CON CLASES*/

/*creamos la clase Robot con propiedad space a la cuál le pasaremos los arrays al instanciar*/
class Robot {
  constructor(space) {
    this.space = space;
    
/*creamos 2 variables que indicarán en que eje se mueve el robot*/
    this.Xposition = 0;
    this.Yposition = 0;
  }
  
/*método que si es igual a 0 no podrá moverse si no lo es sumará una unidad lo que siginifica que se moverá de posicion a la izquierda del array.*/
  moveLeft() {
    if (this.Xposition === 0) {
      return false;
    }
    this.Xposition--;
    return true;
  }
  
 /* método que si es igual al último número del array no podrá moverse si no lo es restará una unidad por lo que se moverá a la izquierda*/
  moveRight() {
    if (this.Xposition === this.space.length - 1) {
      return false;
    }
    this.Xposition++;
    return true;
  }
  
  /*método que si es igual a 0 no podrá moverse si no lo es restará una unidad con lo cual subirá una posición en el array*/
  moveUp() {
    if (this.Yposition === 0) {
      return false;
    }
    this.Yposition--;
    return true;
  }
  
  /*método que si es igual al último número del array no podrá moverse si no lo es sumará una unidad con lo que bajará una unidad en el array*/
  moveDown() {
    if (this.Yposition === this.space.length - 1) {
      return false;
    }
    this.Yposition++;
    return true;
  }
  
/*método que nos dá la posicion actual en los dos ejes*/
  currentPosition() {
    return this.space[this.Yposition][this.Xposition];
  }
}

const mySpace = [
  [1, 9, 5],
  [7, 6, 3],
  [6, 6, 8]
];

/*instanciamos la clase*/
const myLittlePrettyRobot = new Robot(mySpace);

/*utilizamos los diferentes métodos para mover el robot y mostramos resultados*/
console.log(myLittlePrettyRobot.currentPosition());
myLittlePrettyRobot.moveRight();
myLittlePrettyRobot.moveRight();
myLittlePrettyRobot.moveRight();
console.log(myLittlePrettyRobot.currentPosition());
myLittlePrettyRobot.moveDown();
myLittlePrettyRobot.moveDown();
console.log(myLittlePrettyRobot.currentPosition());
myLittlePrettyRobot.moveUp();
console.log(myLittlePrettyRobot.currentPosition());

